XLATE:
------

>>>> important <<<<
- in EngineProxy, keep a count on #of tmos - if we get a segment from moses and tmocount!= 0, then trash it and decrement tmpcount, else add it to Task
>>>> important <<<<


- add cmd line parameters for:
	debug			DONE
	#engines		DONE
	tmos
	language-pair
	execution path
	execution name
	execution directory

- move stopping of queues (resources) into compnnets themsolfg
	NOTE! Might not be a good idea since stopping a queue will impact other components
- document how shutdown should be done + how it should be designed
- ensure we can restart a component that have been stopped
- go through logging in details to see what to log at what level
- make sure we handle all errors
- need tow tmos for engines - one when engines are starting, another when engines are running
- add callback when a segment has been trasnlated so we can measure progress
- need tmo for segments in repositpry - should be eneough with a single tmo and a list of tmos pointing to tasks (we don't need multiple deadline timers running)
- add more JobHandlers (email, saving to file, paths, program to truse for translation etc.)
- check that there are no bugs in repository with mismatch with adding tasks in wrong place
- go through in detail how we start a translator (execvp etc.)



OTHER COMPONENTS:
-----------------
- conversion/retro-conversion
- segmenter (simple)



INFRASTRUCTURE:
---------------
>>>> important <<<<
- when error on 'fd', return an error code 'closed' to caller so that asio can call handler
>>>> important <<<<

- add building in parallel - takes to long time to build now
- add method for geting queue pointer form queue_listere()/queue_sender()


SOCKETQUEUE:
------------
- two queues: server/client queue
- make it 1-1 for right now
- see notes in notebook


TRANSLATOR:
-----------
- install moses and use it directly


DESIGN:
-------
- the job repository should keep a timer and a liist of future timeouts so that if a task doe snot come back it marks it as <EMPTY>
- architecture should be re-visited 
- how should engines be attached to system
- how should resource allocation be handled

