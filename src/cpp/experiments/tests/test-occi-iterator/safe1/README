TODO:
-----

sink:
	- controll commit when connection is controlled by sink

output iterator:
	- controll commit (autocommit after each statement)
	- add execution strategy
	- add print operator so we can dump iterator information

output collection:
	- add multiple ways so collection maintains OCCI resources
	- add commit strategy

input-iterator:
	- add options for managing bulk select (need yo lookup occi documentayion)
	- modify input iterator to use boost function input iterator
	- add print operator so we can dump iterator information


- add namespace

- check if we need to add 'const' to iterator (look in iterator adapter doc)

- add perfect forwarding to collection/iterator if needed
	(bind tuple is const, so no real need to do so)

- add more data types for fetching rows (we only have int and string right now)
- take care of null values (indicator variables ... not sure how to represent them ... maybe boost::optional<>)
- add ctor so that connection is pulled from a connection pool
- write tuple printer where we have choices in printing [type, value], [type], [value]
  (can we use a manipulator?)
- default value for bind type ... is this a good idea?
  are there any alternatives ...?
- look at thread safety

- write 'update collection

NOTES:
------
(1) we treat 'end' iterator specially when comparing iterators
    all end iterators are equal
(2) comparing two iterartors which have not been constructed copy ctor or assignment is undefined behaviour
    unless one is an end iterator
(3) should collection support copy/move/assign?
    maybe we should support move ctor/assign?
    what makes sense conceptually - maybe a collection represented in teh database should not be able to be duplicated ...?
(4) chose to use 'setPrefetchCount()' instead of 'setPrefetchMemorySize()' in input iterator
